Day-1
*****

Introduction to Angular
=======================

        - Angular is the javascript framework.

        - Angular given by Google.

        - Angular used to build the both web applications and mobile applications.

        - Angular categorized into 3 types.

                1) AngularJS

                2) Angular2

                3) Angular Material

        - AngularJS used to build the web applications with the help of javascript.

        - javascript is the Scripting language.

        - javascript won't follows the OOPS.

        - javascript is the object based Scripting language.

        - current version of Angular2 is Angular12.

        - we can build the Angular12 applications with the help of TypeScript.

        - TypeScript is the programming language provided by microsoft.

        - TypeScript follows the OOPS.

            Ex.
                    Inheritance

                    Polymorphism

                    Anstraction

                    Encapsulation

                    ---
                    ---
                    ---
         - Angular Material used to apply the styles to the both web applications and mobile applications.

        - in general browsers can't understand TypeScript.

        - so, we must convert TypeScript to equalent javascript.

        - conversion from TypeScript to equalent javascript called as "Transpilation".

        - tsc is the tool, used to perform the Transpilation.

        - tsc stands for TypeScript Compiler.

        - tsc tool, available in "TypeScript" Software.

        - npm is the tool, helps to install TypeScript.

        - npm stands for node packaging manager.

        - npm present in NodeJS.

        - Visual Studio Code is the suggestable IDE to build the Angular applications.

        - Visual Studio Code also called as VSCode.

        - VSCode is the open source IDE, and provided by microsoft.

Installation of Softwares
*************************

1) download and install NodeJS.

    - npm is the tool, helps to install "TypeScript" and "Angular12".

    - npm stands for node packaging manager.

    - npm present in NodeJS.

    website : https://nodejs.org/en/download/

    file    : node-v14.17.6-x64.msi



2) install TypeScript

    > npm i -g typescript

    i stands for install

    -g stands for global


3) install yarn tool

    yarn tool used to download the libraries.

    yarn tool given by "facebook".

    > npm i -g yarn


4) install angular12


    > npm install -g @angular/cli


    cli stands for command line interface

    cli is the tool.

    cli tool, helps to "build" and "execute" the angular applications.



5) configure the yarn tool to cli tool

    > ng config --global cli.packageManager yarn


6) install Visual Studio Code


website : https://code.visualstudio.com/docs/?dv=win

file    : VSCodeUserSetup-x64-1.60.2.exe


create and execute the angular application
******************************************
1) create the angular application

    > ng new firstApp

    where "firstApp" is the name of the angular application


2) switch to angular application

    > cd firstApp

3) execute the angular application

    > ng s -o

    "s" stands for serve

    "-o" stands for open the default browser


Default Port Number Angular application is 4200


Directory Structure of Angular application
******************************************

1) node_modules

    node_modules containes libraries, those libraries helps to execute the angular application


2) src/app

    used to deploy the applications

    Ex.
        components

        services

        directives

        pipes

        ----
        ----
        ----

3) src/app/app.module.ts

    this file called as registration file / module file / configaration file

    this file used to register the applications

        components

        services

        directives

        pipes

        ----
        ----
        ----

4) app.component.ts
   app.component.html
   app.component.css
   app.component.spec.ts


        when ever we create the angular application automatically "AppComponent" is the default component.


5) assets

    it is used to deploy the static resources.

    Ex.
        logos

        xml files

        json files

        ----
        ----
        ----


5) environments

    used to configure the required environment to work on angular application


6) favicon.ico

    this is a default logo of angular.


7) index.html

    angular starts the execution from "index.html" file.

    index.html file is the main template

    index.html file internally invokes the main.ts file

    main.ts file internally invokes the app.module.ts file

    app.module.ts file containes our applications configarations

    based on our applications configarations angular framework will execute our applications.


8) polyfills.ts

    polyfills behaves like library

    this library helps to convert the TypeScript to equalent javascript.


9) styles.css

    styles.css file used to define the global styles.

    these styles applicable to entire angular project.


10) test.ts

    test.ts behaves like library

    this library helps to write the test cases.


11) .browserslistrc

    containes supporting browsers of angular.

12) .editorconfig

    related to VSCode

13) .gitignore  

    stops the pushing the libraries to repositories


14) angular.json

    used to describe the directory structure of angular application



15) karma.conf.js

    acting like library file to write unit test cases.


16) package.json

    used to download the libraries.


Component
*********
    - Reusable Portion of Complex UI Called as Component.

    - As a Angular Developer, we can create more than one component.

    - we can reuse the components.

    - as a angular developer, we can provide communication between compoenents.

    - Simple typescript class behaves like component.

steps to create the first component
===================================

1) create the angular application

    > ng new componentApp

        where "componentApp" is the name of the angular application


    **********************************************
   componentApp
              src  
                app
                  first.component.ts
                  first.component.html


                  app.module.ts
                index.html
    **********************************************


services
********
    services are used to share the common business logic to multiple compoenents

    services overcomes the data redundancy.

    we can inject service to the compoenents with the help of constructor.

    injecting service to compoenents called as dependency injection.

    "Injectable" is the Predefined class used to create the services.

    Injectable present in @angular/core package.









    

















30-09-2021
==========

*****************************************
mean-project
           src  
             app
               compoenents
                  ui.component.ts
                  ui.component.html

                  backend.component.ts
                  backend.component.html

                  database.component.ts
                  database.component.html
               app.module.ts
            index.html
******************************************
                
01-10-2021
**********

++++++++++++++++++++++++++++++++++++++++++++++++++++++
serviceEx
        src 
           app
             services
                emp.service.ts
             compoenents
                first.component.ts
                first.component.html

                second.component.ts
                second.component.html
             app.module.ts
          index.html
+++++++++++++++++++++++++++++++++++++++++++++++++++++++


05-10-2021
**********

loginEx
      src
        app
          services
              login.service.ts
          compoenents
                login.component.ts
                login.component.html
          app.module.ts
        index.html


communication between compoenents
*********************************
    angular applications are component based applications

    we can create more than one component

    as a angular developer, we can provide communication between compoenents.

    we can provide communication between compoenents in 4 ways.

    1) @Input()

    2) @Output()

    3) @ViewChild()

    4) @ViewChildren()




06-10-2021
**********
steps to provide communication from parent compoenent to child child compoenent

1) create the angular application

    > ng new InputAndOutputEx

2) switch to project

    > cd InputAndOutputEx

3) create the ParentComponent

    > ng g c components/parent --skip-tests -is --flat true --selector=parent

        g stands for genarate

        c stands for component

        --skip-tests menas skip the unit test cases

        -is means inline styles and skip the external css files

        --flat true skip the additional folder creation

        --selector used to assign the selector

4) create the child component

    > ng g c components/child --skip-tests -is --selector=child --flat true

5) map the "ParentComponent" data to "ChildComponent"

    parent.component.html

6) bootstrap the ParentComponent

    app.module.ts


data from child compoenent to parent component
==============================================
1) define event in ChildComponent

    => EventEmitter is Utility class, used to share the data from child compoenent to ParentComponent.


2) fire the EventEmitter.


3) map the child compoenent data to parent compoenent

    parent.component.html




@ViewChild()   && @ViewChildren()
---------------------------------

    - above directives used to get the reference from one compoenent to another compoenent


step 1.
    create the SecondComponent

        > ng g c components/second --skip-tests -is --selector=second --flat true


step 2.
    create the FirstComponent

    > ng g c components/first --skip-tests -is --selector=first --flat true


Pipes
*****
    format the data accroding "application" presentation.

    we have two types of pipes.

        1) Predefined Pipes

        2) Custom Pipes

    the pipes provided by angular framework called as Predefined Pipes.

    the pipes developed by us based on application requirement called as Custom Pipes.



Rest API Call
*************

1) execute the spring boot application

2) test the rest api call with "Postman" / "Browser"

        http://localhost:5000/api/v1/products    (GET Request)

3) create the angular application

    > ng new springBootIntegration

4) create the service

    >  ng g s spring --skip-tests --flat true

5) create the component

    AppComponent



Forms
*****

1) Template Driven Forms

        - Main Forms Logic available in templates

        - These forms are difficult to build "complex forms"


2) Model Driven Forms / Reactive Forms


Directives
**********
    Directives enhances the "views" capabilities.

    we have two types of directives

        1) Predefined Directives

        2) Custom Directives

    The Directives given by angular framework called as "Predefined Directives".

    The Directives Developed by us called as Custom Directives.


Directives internally categorized into 3 types
**********************************************

1) Attribute type directives      ----      []

2) event based directives          -----      events    Ex. click, dblclic, keydown,.....    ()

3) structural based directives         ------   "*"
                                       -----   *ngFor
                                               *ngIf



Single Page Applications
++++++++++++++++++++++++

    - loading one component to another component without refreshing the whole webpage called as Single Page Application.

    - navigation in single page application called as "Routing".

    - we will implement single page applications with the help of "RouterModule"

steps to implement the Single Page Application
**********************************************

1) create the angular application

    > ng new spaDemo1

2) switch to angular application

    > cd spaDemo1

3) create the components

    > ng g c master --skip-tests -is --flat true --selector=master

    > ng g c pageone --skip-tests -is --flat true --selector=pageone

    > ng g c pagetwo --skip-tests -is --flat true --selector=pagetwo

    > ng g c pagethree --skip-tests -is --flat true --selector=pagethree



4) implement the Routing

    /page_one ===> PageoneComponent

    /page_two ===> PagetwoComponent

    /page_three ===> PagethreeComponent

    *************************************
    spaDemo1
           src
             app
               routing
                  app.routes.ts
    ************************************

5) load the routes

    app.module.ts






Lazy Loading
************

1) collect the cloud images path

    https://mernclassbucket.s3.us-east-2.amazonaws.com/p1.jpg

    https://mernclassbucket.s3.us-east-2.amazonaws.com/p2.jpg

    https://mernclassbucket.s3.us-east-2.amazonaws.com/p3.jpg

    https://mernclassbucket.s3.us-east-2.amazonaws.com/p4.jpg

    https://mernclassbucket.s3.us-east-2.amazonaws.com/p5.jpg

    https://mernclassbucket.s3.us-east-2.amazonaws.com/p6.jpg


2) store above images path to "mysql" database

    password : admin

    database name : ng6pm

    table name : products

    host : localhost


implement the backend
*********************
    implement the backend to interact with the database


1) create the directory

    Ex.
        backend

2) switch to backend directory

    > cd backend

3) download the libraries

    => mysql
        "mysql library" used to connect to the mysql database

    => express
        "express library" used to develop the rest apis.
                GET
                POST
                PUT
                DELETE
                ---
                ---
                ---

    => cors
        "cors" library used to enable the cors policy


    Ex.
        npm i mysql express cors

            (or)

        yarn add mysql express cors


    all the libraries downloads to node_modules folder.


4) implement the rest api

    server.js


5) start the node server

    > node server

6) test the rest api by using Postman

    http://localhost:8080/api/products


implementation frontend

1) create the angular application

    > ng new lazyDemoEx

2) switch to lazyDemoEx

    > cd lazyDemoEx

3) implement the ecommerce module

************************************************************
lazyDemoEx
        src
          app
            ecommerce
                   model
                     ecommerce.model.ts
                   service
                     ecommerce.service.ts
                   component
                      ecommerce.component.ts
                      ecommerce.component.html
                   module
                      ecommerce.module.ts
***********************************************************

finally "EcommerceModel" is ready

finally "EcommerceService" is ready with "getProducts()" function.

finally "EcommerceComponent" is ready.

finally "EcommerceModule" is ready



4) implement DemoModule


**************************************************
lazyDemoEx
         src
           app
             demo
               module
                 demo.module.ts

               compoenent
                  demo.component.ts
                  demo.component.html
***************************************************

    finally "DemoModule" is ready


5) implement the main routing

        app.module.ts

6) implement CanLoad Authentication



AWS Deployment
**************
1) install "aws cli" tool

    aws cli tool, used to deploy angular,react,vuejs applications to AWS.

website : https://aws.amazon.com/cli/

file    : AWSCLIV2.msi

2) prepare the production build

    > ng build

    if build success automatically "dist" folder will create.


3) preapre aws s3 bucket

        1) static web site hosting    <== properties

        2) bucket policies      <== permissions


                {
                "Version": "2012-10-17",
                "Statement": [
                        {
                        "Sid": "PublicReadGetObject",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": [
                                "s3:GetObject"
                        ],
                        "Resource": [
                                "arn:aws:s3:::02-ng-6pm/*"
                        ]
                        }
                ]
	        }



4) generate "tokens" to make angular application as cloud application

        IAM

5) edit the package.json file

    package.json
    ************

    "aws-deploy":"aws s3 sync dist/awsDeploymentEx/ s3://02-ng-6pm"


6) execute the following commands

        > aws configure

        > ng build && npm run aws-deploy


7) get the public url from "static web site hosting"

        URL : http://02-ng-6pm.s3-website.us-east-2.amazonaws.com



MEAN Stack Development
**********************

DataBase ===>  MongoDB

BackEnd  ====>   NodeJS

frontend ===> Angular

Rest API'S ====> ExpressJS


1) create the database.

    database name : 05-ng-6pm

    collection names : user_details

                        products
    password : admin

    url : mongodb+srv://admin:admin@miniprojectdb.nzphu.mongodb.net/05-ng-6pm?retryWrites=true&w=majority


BackEnd
*******

NodeJS
******
    "NodeJS" is "backend" technology.

    "NodeJS" internally using "ExpressJS" to develop "Rest API'S"

    Ex.
        GET

        POST

        PUT

        DELETE

    we will develop NodeJS Applications with "javascript".

    NodeJS Supports libraries/node modules

libraries
*********

1) mongoose

    used to connect to mongodb database


2) express

    used to develop the rest apis


3) cors

    used to enable the cors policy


we will download above libraries by using either npm tool or yarn tool


Ex.
    > yarn add mongoose express cors

    above libraries downloads to "node_modules" folder.

create the folder

Ex.
    mean_server


switch to mean_server

    > cd mean_server


download the libraries

> yarn add mongoose express cors


implement the rest api's

server.js

finally following rest api's are ready

1) http://localhost:8080/login    (POST)

2) http://localhost:8080/products  (GET)


frontend
********

1) create the angular application

    > ng new mean-ex


2) implement the following modules

    1) login

    2) products


deploy mean project to aws server
*********************************

deploy backend application

1) push "backend" code to GitHub


2) create the application in AWS Server

        > ElasticBeanStalk

3) implement the CI/CD Operation

        > CodePipeline

4) get the cloud url from ElasticBeanStalk

    > 05mean6pm-env.eba-umeyhjg2.ap-south-1.elasticbeanstalk.com/login       (POST)

    > 05mean6pm-env.eba-umeyhjg2.ap-south-1.elasticbeanstalk.com/products    (GET)


5) test the above rest api calls by using Postman


frontend deployment
*******************

1) configure above rest api calls to angular application


2) run the angular application


3) create the production build

    > ng build

    if build success automatically "dist" folder will create

    "dist" folder representing production build.

4) move the "dist" folder "files" to aws server "s3 bucket"

    => properties

    => bucket policies


5) install aws cli tool

6) create the keys to upload angular application 

    IAM

7) modify the package.json file

    "aws-deploy":"aws s3 sync dist/mean-ex/ s3://05-mean-6pm"

8) execute the following commands

    > aws configure

    > ng build && npm run aws-deploy


9) get the cloud url from static website hosting

    URL : http://05-mean-6pm.s3-website.ap-south-1.amazonaws.com



State Management
****************
    - Angular Applications are component based applications

    - we can create more than one compoenent

    - we can provide communication between componenents also.

    - while incresing the application size, communication between components is difficult.

    - in order to reduce complexity between compoenents communication we will choose state management.

    - we will implement state management by using "NgRx" package.


Architecture
************

    1) types
        - identifying the application requirement called as types.
        Ex.
            STORE_THE_DATA_IN_DATABASE

            STORE_THE_DATA_IN_DATABASE_SUCCESS

            STORE_THE_DATA_IN_DATABASE_FAILURE

    2) actions
        - implementation of types called as actions

    3) effects
        - manage the api data (side effects)

    4) reducer
        - reducer containes application result

    5) store
        - used to manage the centralized data.

    6) dispatch
        - requesting technically called as dispatch

    7) subscribe
        - accessing the result called as subscribe

    8) selector
        - selector behaves like mediator to handover result to compoenents

    9) state
        - application final result called as state


Example_1:
**********

1) create the angular application

    > ng new state-management-ex

2) switch to angular application

    > cd state-management-ex

3) download the libraries

    > @ngrx/store

    > yarn add @ngrx/store


CRUD Operations with JSON Server
********************************
    JSON Server, used to develop the" Rest API'S" Based on "JSON Data".

    JSON Server Default Port Number "3000"

    we can install JSON Server by using following command

        > npm install -g json-server


    -g stands for "global" Installation


steps to develop the rest api's
*******************************
1) create the directory

        Ex. 
                server

2) switch to server directory


        > cd server

3) create the json data

        Ex.
                data.json


4) deploy the data.json file to json-server

    > json-server --watch data.json

5) test the rest api calls with Postman

    =>  http://localhost:3000/products    (GET)

    => http://localhost:3000/products     (POST)

    => http://localhost:3000/products/{id}    (PUT)

    => http://localhost:3000/products/{id}    (DELETE)



Intrgrate Above Rest API Calls to frontend application
******************************************************

1) create the angular application

        > ng new crud-project


2) switch to crud-project

        > cd crud-project

3) download the libraries

        > @ngrx/store

        > @ngrx/effects

        > bootstrap


        > yarn add @ngrx/store @ngrx/effects bootstrap


4) configure the bootstrap in angular.json file


5) implement the "state management" with "modules"

    > AppModule   (Parent Module)

    > GetModule   (Child Module)

    > PostModule    (Child Module)

    > PutModule (Child Module)

    > DeleteModule(Child Module)



GetModule
**********
crud-project
          src
            app

              common
                  model
                    product.model.ts
                            finally "Product" model is ready

              get-module
                      service
                           get.service.ts
                                finally "GetService" is ready

                      types
                          get.types.ts
                                finally following types are ready
                                        1) GET_PRODUCTS

                                        2) GET_PRODUCTS_SUCCESS

                                        3) GET_PRODUCTS_FAIL

                      actions
                          get.actions.ts
                                finally following actions are ready.
                                    1)getProducts

                                    2)getProductsSuccess

                                    3)getProductsFail

                      effects
                          get.effects.ts
                                finally "GetEffects" is ready

                      reducer
                          get.reducer.ts
                                finally "getReducer" is ready

                      module
                          get.module.ts
                                finally "GetModule" is ready

                      selector
                          get.selector.ts
                                finally "getSelector" is ready

                      compoenent
                         get.compoenent.ts
                         get.compoenent.html
                            finally "GetComponent" also ready

finally we completed GetModule


***********************************************
crud-project
           src
             app
               post-module
                        service  
                            post.service.ts
                                finally "PostService" is ready with "postData" function

                        types
                            post.types.ts
                                finally "POST_PRODUCT", "POST_PRODUCT_SUCCESS" and "POST_PRODUCT_FAIL" types are ready

                        actions
                            post.actions.ts
                                finally "productPost", "productPostSuccess" and "productPostFail" actions are ready.

                        effects
                            post.effects.ts
                                finally "postEffects" is ready

                        state
                            post.state.ts
                                finally "PostState" is ready

                        reducer
                            post.reducer.ts
                                finally "postReducer" is ready

                        compoenent
                            post.component.ts
                            post.component.html

                        module
                            post.module.ts
                                finally "PostModule" is ready with "post" key

                        selector
                            post.selector.ts
                                finally "postSelector" is ready
*******************************************************************************************
finally PostModule completed successfully



**************************************************************
crud-project
           src
             app
               put-module
                      service
                         put.service.ts
                            finally "PutService" is ready with "updateProduct(-,-)" function
                      types
                        put.types.ts
                            finally "UPDATE_PRODUCT", "UPDATE_PRODUCT_SUCCESS", "UPDATE_PRODUCT_FAIL" are ready
                      actions
                        put.actions.ts
                            finally "updateProduct", "updateProductSuccess" and "updateProductFail" are ready
                      effects
                        put.effects.ts
                            finally "PutEffects" is ready


                      component
                        put.component.ts
                        put.component.html
                            finally "PutComponent" is ready

                     reducer
                        put.reducer.ts
                            finally "putReducer" is ready

                      module
                        put.module.ts
                            finally "PutModule" is ready

                      state
                        put.state.ts
                            finally "PutState" is ready.

                      selector
                        put.selector.ts
                            finally "putSelector" is ready
*******************************************************************
                      
                     
delete-module
+++++++++++++

***************************************************************************************
crud-project
           src
             app
               delete-module
                      service
                         delete.service.ts
                            finally "DeleteService" is ready with "deleteProduct(-)" function
                           
                      types
                        delete.types.ts
                            finally "DELETE_PRODUCT", "DELETE_PRODUCT_SUCCESS" and "DELETE_PRODUCT_FAIL" types are ready
                            
                      actions
                        delete.actions.ts
                            finally "deleteProduct", "deleteProductSuccess" and "deleteProductFail" actions ready
                            
                      effects
                        delete.effects.ts
                            finally "DeleteEffects" is ready.
                    
                    state
                        delete.state.ts
                            finally "DeleteState" is ready
                    
                    reducer
                        delete.reducer.ts
                            finally "deleteReducer" is ready
                            
                    component
                        delete.component.ts
                        delete.component.html
                            finally "DeleteComponent" is ready


                    module
                        delete.module.ts
                            finally "DeleteModule" is ready
                    selector
                        delete.selector.ts
                            finally "deleteSelector" is ready
*******************************************************************

Test Cases
**********
    test the application functionality called as "Testing".

    we have two types of test cases

    1) unit test cases

    2) end to end test cases

    we will write unit test cases with the help of "jasmine".

    jasmine is the "library" used to write the "unit test" cases.

    "karma" is the runner used to execute the "jasmine" test cases.

    we will write "end to end" test cases with "protractor".

    angular framework recognise the unit test cases with ".spec.ts" extension

    we will recognise the end to end test cases ".e2e-spec.ts" file

    "karma.conf.js" is the configuration file to write ane execute the unit test cases

    angular starts the execution from "index.html" file.

    index.html file internally executes "main.ts" file.

    for main.ts file, test.js file is the testing file

    ng test is the command used to execute the unit test cases.





RXJS
****
    Reactive Extension javascript.

    RXJS package, used to make the asynchronous calls.

    "HttpClient" used to make the "network" call.

    "Observable" used to make the "asynchronous" call.

    "HttpClient" available in "HttpClientModule"

    "HttpClient" and "HttpClientModule" available in @angular/common/http package

    Observable available in rxjs package.


Angular Material
****************
    Angular Material simplifies the complex tasks in simplified manner.

    Angular Material helps to create the Rich UI.

    > ng add @angular/material


Life Cycle Hooks
****************
    Angular Component follows the life cycle methods.

1) constructor()

2) ngOnChanges()

3) ngOnInit()

4) ngDoCheck()

5) ngAfterContentInit()

6) ngAfterContentChecked()

7) ngAfterViewInit()

8) ngAfterViewChecked()

9) ngOnDestroy()






















    

























































































































































    




















































































    



















































































































































































































































































































































































































































































    




































